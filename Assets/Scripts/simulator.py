# -*- coding: utf-8 -*-
"""
Simulador Castle Rescue - 1000 simulaciones del sistema estrat√©gico
Analiza cu√°ntas simulaciones logran salvar m√°s de 5 v√≠ctimas
"""

import sys
import os
import time
from collections import Counter

# Importar el m√≥dulo strategicSystem
# Asumiendo que el archivo se llama strategicSystem.py y est√° en el mismo directorio
try:
    from strategicSystem import CastleRescueModel, SoldierAgent
    print("‚úì M√≥dulo strategicSystem importado correctamente")
except ImportError as e:
    print(f"Error al importar strategicSystem: {e}")
    print("Aseg√∫rate de que el archivo strategicSystem.py est√© en el mismo directorio")
    sys.exit(1)

def run_single_simulation(sim_num, max_steps=500, verbose=False):
    """
    Ejecuta una simulaci√≥n individual del Castle Rescue
    
    Args:
        sim_num (int): N√∫mero de la simulaci√≥n
        max_steps (int): M√°ximo n√∫mero de pasos antes de detener
        verbose (bool): Si mostrar informaci√≥n detallada
    
    Returns:
        dict: Resultado de la simulaci√≥n
    """
    try:
        # Crear el modelo
        model = CastleRescueModel(width=10, height=8, agents=6)
        
        step_count = 0
        
        # Ejecutar hasta que termine el juego o se alcance el l√≠mite de pasos
        while not model.finish_game() and step_count < max_steps:
            model.step()
            step_count += 1
            
            if verbose and step_count % 50 == 0:
                print(f"  Simulaci√≥n {sim_num}: Paso {step_count}, V√≠ctimas salvadas: {model.victims_saved}")
        
        # Recopilar resultados
        result = {
            'simulation': sim_num,
            'victims_saved': model.victims_saved,
            'victims_dead': model.victims_dead,
            'damage_counter': model.damage_counter,
            'steps': step_count,
            'finished': model.finished if hasattr(model, 'finished') else (step_count < max_steps),
            'win': model.win if hasattr(model, 'win') else (model.victims_saved >= 7),
            'reason': model.reason if hasattr(model, 'reason') else 'unknown'
        }
        
        if verbose:
            status = "GAN√ì" if result['win'] else "PERDI√ì"
            print(f"  Simulaci√≥n {sim_num} termin√≥: {status} - V√≠ctimas salvadas: {result['victims_saved']}")
        
        return result
        
    except Exception as e:
        print(f"Error en simulaci√≥n {sim_num}: {e}")
        return {
            'simulation': sim_num,
            'victims_saved': 0,
            'victims_dead': 0,
            'damage_counter': 0,
            'steps': 0,
            'finished': False,
            'win': False,
            'reason': 'error',
            'error': str(e)
        }

def run_batch_simulations(num_simulations=1000, max_steps=500):
    """
    Ejecuta m√∫ltiples simulaciones y analiza los resultados
    
    Args:
        num_simulations (int): N√∫mero de simulaciones a ejecutar
        max_steps (int): M√°ximo n√∫mero de pasos por simulaci√≥n
    
    Returns:
        dict: An√°lisis completo de los resultados
    """
    print(f"üéÆ Iniciando {num_simulations} simulaciones del Castle Rescue System")
    print("=" * 60)
    
    results = []
    start_time = time.time()
    
    # Ejecutar simulaciones
    for i in range(1, num_simulations + 1):
        if i % 100 == 0:
            elapsed = time.time() - start_time
            print(f"Progreso: {i}/{num_simulations} simulaciones completadas ({elapsed:.1f}s)")
        
        result = run_single_simulation(i, max_steps, verbose=(i <= 5))  # Verbose solo para las primeras 5
        results.append(result)
    
    # An√°lisis de resultados
    print(f"\nüìä AN√ÅLISIS DE RESULTADOS ({num_simulations} simulaciones)")
    print("=" * 60)
    
    # Simulaciones que salvaron m√°s de 5 v√≠ctimas
    more_than_5 = [r for r in results if r['victims_saved'] > 5]
    
    print(f"üèÜ Simulaciones que salvaron M√ÅS DE 5 v√≠ctimas: {len(more_than_5)}")
    print(f"üìà Porcentaje de √©xito (>5 v√≠ctimas): {len(more_than_5)/num_simulations*100:.1f}%")
    
    if more_than_5:
        print(f"\nüìã DETALLES DE SIMULACIONES EXITOSAS (>5 v√≠ctimas):")
        print("-" * 50)
        for result in more_than_5:
            print(f"Simulaci√≥n {result['simulation']:3d}: {result['victims_saved']} v√≠ctimas salvadas "
                  f"(Pasos: {result['steps']}, Muertes: {result['victims_dead']}, "
                  f"Da√±o: {result['damage_counter']})")
    
    # Estad√≠sticas generales
    victims_saved_counts = Counter(r['victims_saved'] for r in results)
    total_steps = sum(r['steps'] for r in results)
    total_wins = sum(1 for r in results if r['win'])
    
    print(f"\nüìà ESTAD√çSTICAS GENERALES:")
    print("-" * 30)
    print(f"Total de victorias (‚â•7 v√≠ctimas): {total_wins}")
    print(f"Porcentaje de victorias: {total_wins/num_simulations*100:.1f}%")
    print(f"Promedio de v√≠ctimas salvadas: {sum(r['victims_saved'] for r in results)/num_simulations:.2f}")
    print(f"Promedio de pasos por simulaci√≥n: {total_steps/num_simulations:.1f}")
    print(f"Tiempo total de ejecuci√≥n: {time.time() - start_time:.1f} segundos")
    
    print(f"\nüìä DISTRIBUCI√ìN DE V√çCTIMAS SALVADAS:")
    print("-" * 40)
    for victims in sorted(victims_saved_counts.keys()):
        count = victims_saved_counts[victims]
        percentage = count/num_simulations*100
        bar = "‚ñà" * int(percentage/2)  # Barra visual
        print(f"{victims:2d} v√≠ctimas: {count:4d} veces ({percentage:5.1f}%) {bar}")
    
    # Razones de finalizaci√≥n
    reasons = Counter(r['reason'] for r in results if 'reason' in r)
    if reasons:
        print(f"\nüîç RAZONES DE FINALIZACI√ìN:")
        print("-" * 30)
        for reason, count in reasons.most_common():
            print(f"{reason}: {count} veces ({count/num_simulations*100:.1f}%)")
    
    return {
        'results': results,
        'more_than_5': more_than_5,
        'victims_saved_distribution': victims_saved_counts,
        'total_wins': total_wins,
        'success_rate_more_than_5': len(more_than_5)/num_simulations,
        'win_rate': total_wins/num_simulations,
        'average_victims_saved': sum(r['victims_saved'] for r in results)/num_simulations,
        'average_steps': total_steps/num_simulations,
        'execution_time': time.time() - start_time
    }

if __name__ == "__main__":
    # Configuraci√≥n
    NUM_SIMULATIONS = 1000
    MAX_STEPS_PER_SIM = 500  # L√≠mite de pasos para evitar simulaciones infinitas
    
    print("üè∞ CASTLE RESCUE - SIMULADOR ESTRAT√âGICO")
    print("Analizando el rendimiento del sistema estrat√©gico")
    print(f"Configuraci√≥n: {NUM_SIMULATIONS} simulaciones, m√°x {MAX_STEPS_PER_SIM} pasos/sim")
    print()
    
    # Ejecutar simulaciones
    analysis = run_batch_simulations(NUM_SIMULATIONS, MAX_STEPS_PER_SIM)
    
    # Resumen final
    print(f"\nüéØ RESUMEN EJECUTIVO:")
    print("=" * 50)
    print(f"‚Ä¢ Simulaciones exitosas (>5 v√≠ctimas): {len(analysis['more_than_5'])}/{NUM_SIMULATIONS}")
    print(f"‚Ä¢ Tasa de √©xito (>5 v√≠ctimas): {analysis['success_rate_more_than_5']*100:.1f}%")
    print(f"‚Ä¢ Victorias completas (‚â•7 v√≠ctimas): {analysis['total_wins']}")
    print(f"‚Ä¢ Tasa de victoria: {analysis['win_rate']*100:.1f}%")
    print(f"‚Ä¢ Promedio de v√≠ctimas salvadas: {analysis['average_victims_saved']:.2f}")
    
    if analysis['more_than_5']:
        victims_in_successful = [r['victims_saved'] for r in analysis['more_than_5']]
        print(f"‚Ä¢ En simulaciones exitosas (>5), promedio: {sum(victims_in_successful)/len(victims_in_successful):.2f} v√≠ctimas")
    
    print(f"\n‚úÖ An√°lisis completado en {analysis['execution_time']:.1f} segundos")